{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./src/components/Meta/index.js","webpack:///./src/components/Adsense/index.js","webpack:///./src/templates/Post/index.js"],"names":["__webpack_exports__","_ref","data","location","posts","lodash_get__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","components_Layout__WEBPACK_IMPORTED_MODULE_5__","components_Meta__WEBPACK_IMPORTED_MODULE_4__","site","map","_ref2","i","post","templates_Post__WEBPACK_IMPORTED_MODULE_3__","options","isIndex","key","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_helmet__WEBPACK_IMPORTED_MODULE_1__","react_helmet__WEBPACK_IMPORTED_MODULE_1___default","lodash_get__WEBPACK_IMPORTED_MODULE_2__","title","siteTitle","meta","name","content","property","components_Adsense","componentDidMount","this","props","clientId","window","adsbygoogle","push","render","_this$props","slotId","format","react_default","className","style","display","data-ad-client","data-ad-slot","data-ad-format","Component","Post_getAd","_data$frontmatter","frontmatter","category","tags","description","path","date","image","adsense","html","get_default","isMore","match","fixed","gatsby_browser_entry","boxShadow","to","dateTime","Post_Badges","items","primary","gatsby_image_default","margin","dangerouslySetInnerHTML","__html","getDescription","Post_Button","label","body","replace","split","_ref3","map_default","item"],"mappings":"gNA0BeA,EAAA,QAlBG,SAAAC,GAAwB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,SACnBC,EAAQC,IAAIH,EAAM,gBACxB,OACEI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQN,SAAUA,GAChBG,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,KAAMN,IAAIH,EAAM,eACrBE,EAAMQ,IAAI,SAAAC,EAAWC,GAAX,IAAGC,EAAHF,EAAGE,KAAH,OACTT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,CACEd,KAAMa,EACNE,QAAS,CACPC,SAAS,GAEXC,IAAKL,QASR,IAAMM,EAAS,8CC5BtB,IAAAC,EAAAC,EAAA,GAAAC,EAAAD,EAAAE,EAAAH,GAAAI,EAAAH,EAAA,KAAAI,EAAAJ,EAAAE,EAAAC,GAAAE,EAAAL,EAAA,KAAAjB,EAAAiB,EAAAE,EAAAG,GAkCe3B,EAAA,EA9BF,SAAAC,GAAqB,IAAlBU,EAAkBV,EAAlBU,KAAMiB,EAAY3B,EAAZ2B,MACdC,EAAYxB,IAAIM,EAAM,SAE5B,OADAiB,EAAQA,EAAWA,EAAN,MAAiBC,EAAcA,EAE1CN,EAAAhB,EAAAC,cAACkB,EAAAnB,EAAD,CACEqB,MAAOA,EACPE,KAAM,CACJ,CAAEC,KAAM,eAAgBC,QAAS,WACjC,CACED,KAAM,eACNC,QAAO,IAAM3B,IAAIM,EAAM,YAEzB,CAAEsB,SAAU,WAAYD,QAASJ,GACjC,CAAEK,SAAU,UAAWD,QAAS,WAChC,CACEC,SAAU,iBACVD,QAAS3B,IAAIM,EAAM,gBAErB,CACEsB,SAAU,SACVD,QAAY3B,IAAIM,EAAM,WAAf,YAET,CACEsB,SAAU,WACVD,QAAY3B,IAAIM,EAAM,WAAf,oMCAFuB,oGAzBbC,6BACuBC,KAAKC,MAAlBC,WAEJC,OAAOC,YAAcD,OAAOC,aAAe,IAAIC,KAAK,OAI1DC,kBAAS,IAAAC,EAC8BP,KAAKC,MAAlCC,EADDK,EACCL,SAAUM,EADXD,EACWC,OAAQC,EADnBF,EACmBE,OAE1B,OAAOP,EACLQ,EAAAvC,EAAAC,cAAA,OAAKuC,UAAU,MACbD,EAAAvC,EAAAC,cAAA,OACEuC,UAAU,cACVC,MAAO,CAAEC,QAAS,SAClBC,iBAAgBZ,EAChBa,eAAcP,EACdQ,iBAAgBP,KAIpB,OAtBgBC,EAAAvC,EAAM8C,WCyDtBC,iBAFStD,EAAA,EA/CF,SAAAC,GAAuB,IAApBC,EAAoBD,EAApBC,KAAMe,EAAchB,EAAdgB,QAAcsC,EAS9BrD,EAAKsD,YAPPC,EAFgCF,EAEhCE,SACAC,EAHgCH,EAGhCG,KACAC,EAJgCJ,EAIhCI,YACA/B,EALgC2B,EAKhC3B,MACAgC,EANgCL,EAMhCK,KACAC,EAPgCN,EAOhCM,KACAC,EARgCP,EAQhCO,MAEM5C,EAAqBD,EAArBC,QAAS6C,EAAY9C,EAAZ8C,QACXC,EAAOC,IAAI/D,EAAM,QACjBgE,EAAShD,KAAa8C,EAAKG,MAAM,qBACjCC,EAAQH,IAAIH,EAAO,yBAEzB,OACEhB,EAAAvC,EAAAC,cAAA,OAAKuC,UAAU,UAAU5B,IAAKyC,GAC5Bd,EAAAvC,EAAAC,cAAA,OAAKuC,UAAU,aACbD,EAAAvC,EAAAC,cAAA,OAAKuC,UAAU,QACbD,EAAAvC,EAAAC,cAAC6D,EAAA,KAAD,CAAMrB,MAAO,CAAEsB,UAAW,QAAUC,GAAIX,GACtCd,EAAAvC,EAAAC,cAAA,UAAKoB,GACLkB,EAAAvC,EAAAC,cAAA,QAAMgE,SAAUX,GAAOA,IAExBY,EAAO,CAAEC,MAAO,CAACjB,GAAWkB,SAAS,IACrCF,EAAO,CAAEC,MAAOhB,KAEnBZ,EAAAvC,EAAAC,cAAA,OAAKuC,UAAU,WACbD,EAAAvC,EAAAC,cAAA,SAAImD,GACHS,EACCtB,EAAAvC,EAAAC,cAACoE,EAAArE,EAAD,CAAK6D,MAAOA,EAAOpB,MAAO,CAAEC,QAAS,QAAS4B,OAAQ,YAEtD,IAGJ/B,EAAAvC,EAAAC,cAAA,OACEuC,UAAU,UACV+B,wBAAyB,CACvBC,OAAQb,EAASc,EAAehB,GAAQA,KAG3CE,EAASe,EAAO,CAAErB,OAAMsB,MAAO,OAAQP,SAAS,IAAU,GAC1DrB,EAAMpC,EAAS6C,MAQV,SAAC7C,EAAS6C,GACtB,OAAQ7C,EAAmE,GAAzD4B,EAAAvC,EAAAC,cAAC0B,EAAD,CAASI,SAAUyB,EAASnB,OAAO,GAAGC,OAAO,WAG3DmC,EAAiB,SAAAG,GAErB,OADAA,EAAOA,EAAKC,QAAQ,gBAAiB,oCAC5BjB,MAAM,2BAEU,KADvBgB,EAAOA,EAAKE,MAAM,sBACF,GACPF,EAAK,GAGTA,GAGHF,EAAS,SAAApE,GAAA,IAAG+C,EAAH/C,EAAG+C,KAAMsB,EAATrE,EAASqE,MAAOP,EAAhB9D,EAAgB8D,QAAhB,OACb7B,EAAAvC,EAAAC,cAAC6D,EAAA,KAAD,CAAMtB,UAAU,WAAWwB,GAAIX,GAC7Bd,EAAAvC,EAAAC,cAAA,QACEuC,UAAS,sCACP4B,EAAU,sBAAwB,0BAGnCO,KAKDT,EAAS,SAAAa,GAAA,IAAGZ,EAAHY,EAAGZ,MAAOC,EAAVW,EAAUX,QAAV,OACbY,IAAIb,EAAO,SAACc,EAAM1E,GAChB,OACEgC,EAAAvC,EAAAC,cAAA,QACEuC,UAAS,UAAW4B,EAAU,gBAAkB,mBAChDxD,IAAKL,GAEJ0E","file":"component---src-pages-blog-js-87bb0185ae4622baaca6.js","sourcesContent":["import { graphql } from 'gatsby'\r\nimport React from 'react'\r\nimport get from 'lodash/get'\r\n\r\nimport Post from 'templates/Post'\r\nimport Meta from 'components/Meta'\r\nimport Layout from 'components/Layout'\r\n\r\nconst BlogIndex = ({ data, location }) => {\r\n  const posts = get(data, 'remark.posts')\r\n  return (\r\n    <Layout location={location}>\r\n      <Meta site={get(data, 'site.meta')} />\r\n      {posts.map(({ post }, i) => (\r\n        <Post\r\n          data={post}\r\n          options={{\r\n            isIndex: true,\r\n          }}\r\n          key={i}\r\n        />\r\n      ))}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogQuery {\r\n    site {\r\n      meta: siteMetadata {\r\n        title\r\n        description\r\n        url: siteUrl\r\n        author\r\n        twitter\r\n        adsense\r\n      }\r\n    }\r\n    remark: allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n    ) {\r\n      posts: edges {\r\n        post: node {\r\n          html\r\n          frontmatter {\r\n            layout\r\n            title\r\n            path\r\n            category\r\n            tags\r\n            description\r\n            date(formatString: \"YYYY/MM/DD\")\r\n            image {\r\n              childImageSharp {\r\n                fixed(width: 500) {\r\n                  ...GatsbyImageSharpFixed_withWebp\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport get from 'lodash/get'\r\n\r\nconst Meta = ({ site, title }) => {\r\n  const siteTitle = get(site, 'title')\r\n  title = title ? `${title} | ${siteTitle}` : siteTitle\r\n  return (\r\n    <Helmet\r\n      title={title}\r\n      meta={[\r\n        { name: 'twitter:card', content: 'summary' },\r\n        {\r\n          name: 'twitter:site',\r\n          content: `@${get(site, 'twitter')}`,\r\n        },\r\n        { property: 'og:title', content: title },\r\n        { property: 'og:type', content: 'website' },\r\n        {\r\n          property: 'og:description',\r\n          content: get(site, 'description'),\r\n        },\r\n        {\r\n          property: 'og:url',\r\n          content: `${get(site, 'siteUrl')}/profile`,\r\n        },\r\n        {\r\n          property: 'og:image',\r\n          content: `${get(site, 'siteUrl')}/img/profile.jpg`,\r\n        },\r\n      ]}\r\n    />\r\n  )\r\n}\r\nexport default Meta\r\n","import React from 'react'\r\n\r\nclass Adsense extends React.Component {\r\n  componentDidMount() {\r\n    const { clientId } = this.props\r\n    if (clientId) {\r\n      ;(window.adsbygoogle = window.adsbygoogle || []).push({})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { clientId, slotId, format } = this.props\r\n\r\n    return clientId ? (\r\n      <div className=\"ad\">\r\n        <ins\r\n          className=\"adsbygoogle\"\r\n          style={{ display: 'block' }}\r\n          data-ad-client={clientId}\r\n          data-ad-slot={slotId}\r\n          data-ad-format={format}\r\n        />\r\n      </div>\r\n    ) : (\r\n      ''\r\n    )\r\n  }\r\n}\r\nexport default Adsense\r\n","import { Link } from 'gatsby'\r\nimport get from 'lodash/get'\r\nimport React from 'react'\r\nimport map from 'lodash/map'\r\nimport Img from 'gatsby-image'\r\n\r\nimport Adsense from 'components/Adsense'\r\nimport Footer from 'components/Footer'\r\nimport './style.scss'\r\n\r\nconst Post = ({ data, options }) => {\r\n  const {\r\n    category,\r\n    tags,\r\n    description,\r\n    title,\r\n    path,\r\n    date,\r\n    image,\r\n  } = data.frontmatter\r\n  const { isIndex, adsense } = options\r\n  const html = get(data, 'html')\r\n  const isMore = isIndex && !!html.match('<!--more-->')\r\n  const fixed = get(image, 'childImageSharp.fixed')\r\n\r\n  return (\r\n    <div className=\"article\" key={path}>\r\n      <div className=\"container\">\r\n        <div className=\"info\">\r\n          <Link style={{ boxShadow: 'none' }} to={path}>\r\n            <h1>{title}</h1>\r\n            <time dateTime={date}>{date}</time>\r\n          </Link>\r\n          {Badges({ items: [category], primary: true })}\r\n          {Badges({ items: tags })}\r\n        </div>\r\n        <div className=\"content\">\r\n          <p>{description}</p>\r\n          {fixed ? (\r\n            <Img fixed={fixed} style={{ display: 'block', margin: '0 auto' }} />\r\n          ) : (\r\n            ''\r\n          )}\r\n        </div>\r\n        <div\r\n          className=\"content\"\r\n          dangerouslySetInnerHTML={{\r\n            __html: isMore ? getDescription(html) : html,\r\n          }}\r\n        />\r\n        {isMore ? Button({ path, label: 'MORE', primary: true }) : ''}\r\n        {getAd(isIndex, adsense)}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Post\r\n\r\nconst getAd = (isIndex, adsense) => {\r\n  return !isIndex ? <Adsense clientId={adsense} slotId=\"\" format=\"auto\" /> : ''\r\n}\r\n\r\nconst getDescription = body => {\r\n  body = body.replace(/<blockquote>/g, '<blockquote class=\"blockquote\">')\r\n  if (body.match('<!--more-->')) {\r\n    body = body.split('<!--more-->')\r\n    if (typeof body[0] !== 'undefined') {\r\n      return body[0]\r\n    }\r\n  }\r\n  return body\r\n}\r\n\r\nconst Button = ({ path, label, primary }) => (\r\n  <Link className=\"readmore\" to={path}>\r\n    <span\r\n      className={`btn btn-outline-primary btn-block ${\r\n        primary ? 'btn-outline-primary' : 'btn-outline-secondary'\r\n      }`}\r\n    >\r\n      {label}\r\n    </span>\r\n  </Link>\r\n)\r\n\r\nconst Badges = ({ items, primary }) =>\r\n  map(items, (item, i) => {\r\n    return (\r\n      <span\r\n        className={`badge ${primary ? 'badge-primary' : 'badge-secondary'}`}\r\n        key={i}\r\n      >\r\n        {item}\r\n      </span>\r\n    )\r\n  })\r\n"],"sourceRoot":""}